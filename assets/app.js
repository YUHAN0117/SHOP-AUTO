// Frontend reads data/products.json generated by GitHub Actions
const DATA_URL = 'data/products.json';

const $grid = document.getElementById('grid');
const $tpl = document.getElementById('card-tpl');
const $q = document.getElementById('q');
const $category = document.getElementById('category');
const $sort = document.getElementById('sort');
const $empty = document.getElementById('empty');
const $count = document.getElementById('count');
const $last = document.getElementById('lastUpdated');

let ALL = [];

async function fetchProducts() {
  const res = await fetch(DATA_URL + '?_=' + Date.now());
  if (!res.ok) {
    $empty.hidden = false;
    $empty.textContent = '尚未產生 products.json，等待自動更新或手動觸發 Actions。';
    return;
  }
  const data = await res.json();
  ALL = data.items || [];
  $last.textContent = data.lastUpdated || '';
  populateCategory(ALL);
  render();
}

function populateCategory(items){
  const cats = Array.from(new Set(items.map(it => it.category).filter(Boolean))).sort();
  $category.innerHTML = '<option value="">所有分類</option>' + cats.map(c => `<option value="${c}">${c}</option>`).join('');
}

function render(){
  const q = $q.value.trim().toLowerCase();
  const cat = $category.value;
  let items = ALL.filter(it => it.active !== false && it.active !== 'FALSE');

  if (q) items = items.filter(it => (it.title||'').toLowerCase().includes(q) || (it.note||'').toLowerCase().includes(q));
  if (cat) items = items.filter(it => (it.category||'') === cat);

  const sort = $sort.value;
  items.sort((a,b)=>{
    const pa = parseFloat(a.price) || 0, pb = parseFloat(b.price) || 0;
    const ra = parseFloat(a.rating) || 0, rb = parseFloat(b.rating) || 0;
    const da = new Date(a.added_at || a.updated_at || 0).getTime();
    const db = new Date(b.added_at || b.updated_at || 0).getTime();
    if (sort === 'price_asc') return pa - pb;
    if (sort === 'price_desc') return pb - pa;
    if (sort === 'rating_desc') return rb - ra;
    if (sort === 'newest') return db - da;
    return (rb*5 + db/1e11) - (ra*5 + da/1e11);
  });

  $grid.innerHTML = '';
  items.forEach(it => {
    const node = $tpl.content.cloneNode(true);
    const $a = node.querySelector('.thumb');
    const $img = node.querySelector('img');
    const $title = node.querySelector('.title');
    const $price = node.querySelector('.price');
    const $rating = node.querySelector('.rating');
    const $btn = node.querySelector('.btn');
    const $tags = node.querySelector('.tags');

    const href = it.affiliate_url || it.url;
    $a.href = href; $btn.href = href;

    $img.src = it.image || it.image_url || '';
    $img.alt = it.title || '商品';

    $title.textContent = it.title || '(未命名商品)';
    $title.href = href;

    $price.textContent = it.price ? `NT$ ${Number(it.price).toLocaleString()}` : '';
    $rating.textContent = it.rating ? `★ ${it.rating}` : '';

    const chips = [];
    if (it.category) chips.push(it.category);
    if (it.brand) chips.push(it.brand);
    if (it.tags) chips.push(...String(it.tags).split(',').map(s => s.trim()).filter(Boolean));
    $tags.innerHTML = chips.map(t => `<span class="chip">${t}</span>`).join('');

    $grid.appendChild(node);
  });

  $count.textContent = String(items.length);
  $empty.hidden = items.length !== 0;
}

$q.addEventListener('input', render);
$category.addEventListener('change', render);
$sort.addEventListener('change', render);

fetchProducts();
